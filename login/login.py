# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'login.ui'
#
# Created by: PyQt5 UI code generator 5.15.5
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5.QtCore import Qt
from regist import *
from Con_MySQL import *
import sys


global UserName
UserP = {}  #定义一个存储密码账号的元组
class Login_Ui(QWidget):
    def __init__(self):
        super(Login_Ui, self).__init__()
        self.re = Regist_Ui()  # 这边一定要加self
        self.setupUi(self)
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(716, 371)
        Form.setMinimumSize(QtCore.QSize(716, 371))
        Form.setMaximumSize(QtCore.QSize(716, 371))
        self.layoutWidget = QtWidgets.QWidget(Form)
        self.layoutWidget.setGeometry(QtCore.QRect(380, 70, 331, 271))
        self.layoutWidget.setObjectName("layoutWidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.layoutWidget)
        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.Login = QtWidgets.QPushButton(self.layoutWidget)
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(14)
        self.Login.setFont(font)
        self.Login.setObjectName("Login")
        self.horizontalLayout.addWidget(self.Login)
        spacerItem = QtWidgets.QSpacerItem(18, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.Logout = QtWidgets.QPushButton(self.layoutWidget)
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(14)
        self.Logout.setFont(font)
        self.Logout.setObjectName("Logout")
        self.horizontalLayout.addWidget(self.Logout)
        spacerItem1 = QtWidgets.QSpacerItem(18, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem1)
        self.Regist = QtWidgets.QPushButton(self.layoutWidget)
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(14)
        self.Regist.setFont(font)
        self.Regist.setObjectName("Regist")
        self.horizontalLayout.addWidget(self.Regist)
        self.gridLayout_2.addLayout(self.horizontalLayout, 1, 0, 1, 1)
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.Username = QtWidgets.QLabel(self.layoutWidget)
        self.Username.setObjectName("Username")
        self.gridLayout.addWidget(self.Username, 0, 0, 1, 1)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem2, 0, 1, 1, 1)
        self.lineEdit = QtWidgets.QLineEdit(self.layoutWidget)
        self.lineEdit.setMinimumSize(QtCore.QSize(201, 31))
        self.lineEdit.setMaximumSize(QtCore.QSize(201, 31))
        self.lineEdit.setObjectName("lineEdit")
        self.gridLayout.addWidget(self.lineEdit, 0, 2, 1, 1)
        self.Password = QtWidgets.QLabel(self.layoutWidget)
        self.Password.setObjectName("Password")
        self.gridLayout.addWidget(self.Password, 1, 0, 1, 1)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem3, 1, 1, 1, 1)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.layoutWidget)
        self.lineEdit_2.setMinimumSize(QtCore.QSize(201, 31))
        self.lineEdit_2.setMaximumSize(QtCore.QSize(201, 31))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.gridLayout.addWidget(self.lineEdit_2, 1, 2, 1, 1)
        self.gridLayout_2.addLayout(self.gridLayout, 0, 0, 1, 1)
        self.textBrowser = QtWidgets.QTextBrowser(Form)
        self.textBrowser.setGeometry(QtCore.QRect(10, 70, 361, 301))
        self.textBrowser.setStyleSheet("border-image: url(./image/house.jpg);")
        self.textBrowser.setObjectName("textBrowser")
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(130, 20, 471, 41))
        self.label.setObjectName("label")

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)
        """槽函数"""
        self.Regist.clicked.connect(self.regist_button)  #跳转到注册页面
        self.re.SuccessReg.connect(self.Success_Regist)  #注册或者取消跳转回来
        self.Login.clicked.connect(self.login_button)    #登录
        self.Logout.clicked.connect(self.logout_button)  #退出

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "用户登录"))
        self.Login.setText(_translate("Form", "登录"))
        self.Logout.setText(_translate("Form", "退出"))
        self.Regist.setText(_translate("Form", "注册"))
        self.Username.setText(_translate("Form", "<html><head/><body><p><span style=\" font-size:16pt;\">账号</span></p></body></html>"))
        self.Password.setText(_translate("Form", "<html><head/><body><p><span style=\" font-size:16pt;\">密码</span></p></body></html>"))
        self.label.setText(_translate("Form", "<html><head/><body><p><span style=\" font-size:20pt; font-weight:600; font-style:italic;\">危化品仓储环境风险预警模型</span></p></body></html>"))

        self.lineEdit.setFocus()
        self.lineEdit.setPlaceholderText("请输入账号")
        self.lineEdit_2.setPlaceholderText("请输入密码")
        self.lineEdit_2.setEchoMode(QLineEdit.Password) #密码隐藏

        # self.setFocusPolicy(Qt.StrongFocus)
    #注册
    def regist_button(self):
        #载入数据库
        # self.sql = Oper_Mysql()
        # self.sql.ZSGC_Mysql()
        self.re.show()
        widget.close()

    #登录
    def login_button(self):
        self.sql = Oper_Mysql()
        if QSqlDatabase.contains("qt_sql_default_connection"):
            db = QSqlDatabase.database("qt_sql_default_connection")
        else:
            db = QSqlDatabase.addDatabase("QMYSQL")
        Login_User = self.lineEdit.text()
        Login_Passwd = self.lineEdit_2.text()
        # print(type(Login_User))
        # print(type(Login_Passwd))

        if Login_User == 0 or Login_Passwd.strip() == '':
            QMessageBox.information(self, "error", "输入错误")
        else:
            query = QSqlQuery()
            query.exec_("select *from Management")
            while query.next():
                UserID = str(query.value("M_UserID"))
                UserPasswd = query.value("M_PassWord")
                #UserName = query.value("M_UserName")
                UserP[UserID] = UserPasswd
            length = len(UserP)
            for key in UserP:
                length = length - 1
                if key == Login_User and UserP[Login_User] == Login_Passwd:  #密码和账号都对的情况下
                    mess = QMessageBox()
                    mess.setWindowTitle("Success")
                    mess.setText("登录成功")
                    mess.setStandardButtons(QMessageBox.Ok)
                    mess.button(QMessageBox.Ok).animateClick(1000)  #弹框定时关闭
                    mess.exec_()
                    print("登录成功")
                    break
                elif key != Login_User and length == 0:
                    QMessageBox.information(self, "waining", "账号不存在", QMessageBox.Ok)
                    return
                elif key == Login_User and UserP[Login_User] != Login_Passwd:
                    QMessageBox.information(self, "error!", "密码输入错误", QMessageBox.Ok)
                    break

    #退出
    def logout_button(self):
        #警告对话框
        messageBox = QMessageBox(QMessageBox.Warning, "警告", "是否退出系统！")
        Qyes = messageBox.addButton(self.tr("确认"), QMessageBox.YesRole)
        Qno = messageBox.addButton(self.tr("取消"), QMessageBox.NoRole)
        messageBox.setDefaultButton(Qno)   #默认焦点
        messageBox.exec_()   #保持
        if messageBox.clickedButton() == Qyes:
            widget.close()
        else:
            return
    #成功注册
    def Success_Regist(self):
        widget.show()
        self.re.close()


if __name__=="__main__":
    app=QApplication(sys.argv)
    widget=QtWidgets.QWidget()
    w=Login_Ui()
    w.setupUi(widget)
    widget.show()
    sys.exit(app.exec())